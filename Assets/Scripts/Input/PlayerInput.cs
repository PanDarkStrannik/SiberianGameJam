//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PointerPressedMove"",
            ""id"": ""0b0c504c-1d4d-48b5-a653-741c10cafb8a"",
            ""actions"": [
                {
                    ""name"": ""Pointer Move"",
                    ""type"": ""Value"",
                    ""id"": ""d82db50e-5c30-4cca-9d86-445fa5a52778"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b954f4e9-06d6-4d84-9b90-82163dd46cfb"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""295878cd-6cd4-4e46-a2e2-7d279e8c8c6c"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pointer Control Scheme"",
                    ""action"": ""Pointer Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""eb37a535-a51c-4d17-b41e-a61eadc0b348"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pointer Control Scheme"",
                    ""action"": ""Pointer Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""WS"",
            ""id"": ""e70dfeea-3352-4084-95d2-53f5b9dc0123"",
            ""actions"": [
                {
                    ""name"": ""WS"",
                    ""type"": ""Button"",
                    ""id"": ""fbf1bcd4-ca36-46e2-aaf1-801d354b564b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""112933d0-b47e-4617-84d6-2914b04a145e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WS"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""a648c543-dba3-41a5-8614-dc9790fc7a17"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""e9832d82-3c81-484d-8d11-9c46ede381a3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pointer Control Scheme"",
            ""bindingGroup"": ""Pointer Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Pointer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PointerPressedMove
        m_PointerPressedMove = asset.FindActionMap("PointerPressedMove", throwIfNotFound: true);
        m_PointerPressedMove_PointerMove = m_PointerPressedMove.FindAction("Pointer Move", throwIfNotFound: true);
        // WS
        m_WS = asset.FindActionMap("WS", throwIfNotFound: true);
        m_WS_WS = m_WS.FindAction("WS", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PointerPressedMove
    private readonly InputActionMap m_PointerPressedMove;
    private IPointerPressedMoveActions m_PointerPressedMoveActionsCallbackInterface;
    private readonly InputAction m_PointerPressedMove_PointerMove;
    public struct PointerPressedMoveActions
    {
        private @PlayerInput m_Wrapper;
        public PointerPressedMoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerMove => m_Wrapper.m_PointerPressedMove_PointerMove;
        public InputActionMap Get() { return m_Wrapper.m_PointerPressedMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PointerPressedMoveActions set) { return set.Get(); }
        public void SetCallbacks(IPointerPressedMoveActions instance)
        {
            if (m_Wrapper.m_PointerPressedMoveActionsCallbackInterface != null)
            {
                @PointerMove.started -= m_Wrapper.m_PointerPressedMoveActionsCallbackInterface.OnPointerMove;
                @PointerMove.performed -= m_Wrapper.m_PointerPressedMoveActionsCallbackInterface.OnPointerMove;
                @PointerMove.canceled -= m_Wrapper.m_PointerPressedMoveActionsCallbackInterface.OnPointerMove;
            }
            m_Wrapper.m_PointerPressedMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerMove.started += instance.OnPointerMove;
                @PointerMove.performed += instance.OnPointerMove;
                @PointerMove.canceled += instance.OnPointerMove;
            }
        }
    }
    public PointerPressedMoveActions @PointerPressedMove => new PointerPressedMoveActions(this);

    // WS
    private readonly InputActionMap m_WS;
    private IWSActions m_WSActionsCallbackInterface;
    private readonly InputAction m_WS_WS;
    public struct WSActions
    {
        private @PlayerInput m_Wrapper;
        public WSActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @WS => m_Wrapper.m_WS_WS;
        public InputActionMap Get() { return m_Wrapper.m_WS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WSActions set) { return set.Get(); }
        public void SetCallbacks(IWSActions instance)
        {
            if (m_Wrapper.m_WSActionsCallbackInterface != null)
            {
                @WS.started -= m_Wrapper.m_WSActionsCallbackInterface.OnWS;
                @WS.performed -= m_Wrapper.m_WSActionsCallbackInterface.OnWS;
                @WS.canceled -= m_Wrapper.m_WSActionsCallbackInterface.OnWS;
            }
            m_Wrapper.m_WSActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WS.started += instance.OnWS;
                @WS.performed += instance.OnWS;
                @WS.canceled += instance.OnWS;
            }
        }
    }
    public WSActions @WS => new WSActions(this);
    private int m_PointerControlSchemeSchemeIndex = -1;
    public InputControlScheme PointerControlSchemeScheme
    {
        get
        {
            if (m_PointerControlSchemeSchemeIndex == -1) m_PointerControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Pointer Control Scheme");
            return asset.controlSchemes[m_PointerControlSchemeSchemeIndex];
        }
    }
    public interface IPointerPressedMoveActions
    {
        void OnPointerMove(InputAction.CallbackContext context);
    }
    public interface IWSActions
    {
        void OnWS(InputAction.CallbackContext context);
    }
}
